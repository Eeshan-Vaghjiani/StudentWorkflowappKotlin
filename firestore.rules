rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if user is a member of a group
    function isMember(groupId) {
      return isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }
    
    // Check if user is a group admin or owner
    function isGroupAdmin(groupId) {
      let group = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return isAuthenticated() && 
        request.auth.uid in group.memberIds &&
        (group.owner == request.auth.uid);
    }
    
    // Check if user is a participant in a chat
    function isParticipant(chatId) {
      return isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }
    
    // Check if user is assigned to a task
    function isAssignedTo(taskData) {
      return isAuthenticated() && 
        (isOwner(taskData.createdBy) || request.auth.uid in taskData.assignedTo);
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Any authenticated user can read user profiles (for search, chat, etc.)
      allow read: if isAuthenticated();
      
      // Users can only write to their own document
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // ============================================
    // GROUPS COLLECTION
    // ============================================
    
    match /groups/{groupId} {
      // Members can read group data, or anyone can read public groups
      allow read: if isAuthenticated() && 
        (isMember(groupId) || resource.data.settings.isPublic == true);
      
      // Any authenticated user can create a group
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.memberIds;
      
      // Only admins/owner can update group details, or members can update to add themselves
      allow update: if isAuthenticated() && 
        (isGroupAdmin(groupId) || 
         isOwner(resource.data.owner) ||
         (request.auth.uid in request.resource.data.memberIds && 
          request.auth.uid in resource.data.memberIds));
      
      // Only owner can delete groups
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.owner);
    }
    
    // ============================================
    // TASKS COLLECTION
    // ============================================
    
    match /tasks/{taskId} {
      // Users can read tasks they created OR are assigned to
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) ||
         (resource.data.assignedTo != null && request.auth.uid in resource.data.assignedTo));
      
      // Any authenticated user can create tasks
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      // Task creator or assigned users can update
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.userId) ||
         (resource.data.assignedTo != null && request.auth.uid in resource.data.assignedTo));
      
      // Only task creator can delete
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.userId);
    }
    
    // ============================================
    // CHATS COLLECTION
    // ============================================
    
    match /chats/{chatId} {
      // Only participants can read chat metadata
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Allow create if user is in the participants array being created
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Only participants can update chat (for typing status, last message, etc.)
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Only participants can delete chat
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only participants can read messages
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Only participants can create messages
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Message sender can update their own messages (for editing)
        // OR participants can update for read status
        allow update: if isAuthenticated() && 
          (isOwner(resource.data.senderId) ||
           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        // Only message sender can delete their own messages
        allow delete: if isAuthenticated() && 
          isOwner(resource.data.senderId);
      }
    }
    
    // ============================================
    // TYPING STATUS SUBCOLLECTION
    // ============================================
    
    match /chats/{chatId}/typing_status/{userId} {
      // Participants can read typing status
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      // Participants can update their own typing status
      allow write: if isAuthenticated() && 
        isOwner(userId) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && 
        isOwner(resource.data.userId);
      
      // System can create notifications (via Cloud Functions)
      // Users can update their own notifications (mark as read)
      allow write: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
    }
    
    // ============================================
    // GROUP ACTIVITIES COLLECTION
    // ============================================
    
    match /group_activities/{activityId} {
      // Members can read activities from their groups
      allow read: if isAuthenticated() && 
        isMember(resource.data.groupId);
      
      // Group members can create activities
      allow create: if isAuthenticated() && 
        isMember(request.resource.data.groupId);
      
      // Only activity creators can update their activities
      allow update: if isAuthenticated() && 
        isOwner(resource.data.userId);
      
      // Only activity creators or group admins can delete activities
      allow delete: if isAuthenticated() && 
        (isOwner(resource.data.userId) || 
         isGroupAdmin(resource.data.groupId));
    }
  }
}